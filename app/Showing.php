<?php

namespace App;

use App\Notifications\newTicket;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;

class Showing extends Model
{

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::created(function($model){
            $showroom = Showroom::where('id', $model->showroom_id)->first();
            for($x = 1; $x <= $showroom->seatNumber; $x++) {
                $seat = new Seat();
                $seat->taken = false;
                $seat->number = $x;
                $seat->showings_id = $model->id;
                $seat->save();
            }//
            //Once a showing for the movie has been created its no longer coming soon - flip its boolean value
            $movie = Movie::where('id', $model->movie_id)->first();
            $movie->is_active = true;
            $movie->save();

        });

        //If the showing deleted was the only one then its no longer an active movie and flips to coming soon idk in case it comes back
        self::deleted(function($model) {
            $showings = Showing::where('movie_id', $model->movie_id)->get();
            if ($showings->isEmpty()) {
                $movie = Movie::where('id', $model->movie_id)->first();
                $movie->is_active = false;
                $movie->save();
            }
        });
    }
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'dateTime', 'duration', 'showroom_id', 'movie_id'
    ];

    protected $casts = [
        'dateTime' => 'dateTime',
    ];

    public function Showroom() {
        return $this->belongsTo('App\Showroom');
    }

    public function Movie() {
        return $this->belongsTo('App\Movie');
    }

    public function tickets() {
        return $this->hasMany('App\Ticket');
    }

}
